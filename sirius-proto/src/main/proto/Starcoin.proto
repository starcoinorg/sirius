syntax = "proto2";
import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";

package org.starcoin.proto;

message Ping {
    required uint64 nonce = 1;
}

message Pong {
    required uint64 nonce = 1; //newNonce from MsgPing
}

enum TestEnum {
    TEST_ENUM_ZERO = 0;
    TEST_ENUM_ONE = 1;
}

//just for test
message TestData {
    required bool booleanValue = 1;
    required uint32 intValue = 2;
    required TestEnum enumValue = 3;
    required bytes stringValue = 4;
    required bytes bytesValue = 5;
    optional bytes optionalValue = 6;
    required bytes bigIntegerValue = 7;
}

message Deposit {
    required bytes address = 1;
    required bytes amount = 2;
}

message OffchainTransactionData {
    required uint32 eon = 1;
    required bytes from = 2;
    required bytes to = 3;
    required bytes amount = 4;
    required uint64 timestamp = 5;
}

message OffchainTransaction {
    required OffchainTransactionData data = 1;
    required bytes sign = 2;
}

message OffchainTransactionList {
    repeated OffchainTransaction txs = 1;
}

message AMTreeInternalNodeInfo {
    required bytes left = 1;
    required bytes offset = 2;
    required bytes right = 3;
}

message AMTreeLeafNodeInfo {
    required bytes addressHash = 1;
    required Update update  = 2;
}

message Withdrawal {
    required AMTreeProof proof = 1;
    required bytes amount = 2;
}

enum WithdrawalStatusType {
    WITHDRAWAL_STATUS_INIT = 0;
    WITHDRAWAL_STATUS_CANCEL = 1;
    WITHDRAWAL_STATUS_PASSED = 2;
    WITHDRAWAL_STATUS_CONFIRMED = 3;
    WITHDRAWAL_STATUS_CLIENT_CONFIRMED = 4;
}

message WithdrawalStatus {
    required WithdrawalStatusType type = 1;
    required Withdrawal withdrawal = 2;
}

enum PathDirection {
    DIRECTION_ROOT = 0;
    DIRECTION_LEFT = 1;
    DIRECTION_RIGHT = 2;
}

message AMTreePathNode {
    required bytes nodeHash = 1;
    required PathDirection direction = 2;
    required bytes offset = 3;
    required bytes allotment = 4;
}

message AMTreePath {
    required uint32 eon = 1;
    required AMTreePathNode leaf = 2;
    repeated AMTreePathNode nodes = 3;
}

message AMTreeProof {
    required AMTreePath path = 1;
    required AMTreeLeafNodeInfo leaf = 2;
}

//UpdateData
message UpdateData {
    required uint32 eon = 1;
    required uint64 version = 2;
    required bytes sendAmount = 3;
    required bytes receiveAmount = 4;
    required bytes root = 5;
}

//Update
message Update {
    required UpdateData update = 1;
    required bytes sign = 2;
    required bytes hubSign = 3;
}

message Participant {
    required bytes publicKey = 1;
}

message ParticipantGang {
    required Participant participant = 1;
    required bytes privateKey = 2;
}

message CancelWithdrawal {
    required bytes addr = 1;
    required Update update = 2;
    required AMTreeProof proof = 3;
}

message BalanceUpdateProof {
    required bool hasUp = 1;
    required Update update = 2;
    required bool hasPath = 3;
    required AMTreePath path = 4;
}

message CloseBalanceUpdateChallenge {
    required bytes addr = 1;
    required AMTreeProof proof = 2;
}

message RegisterParticipantRequest {
    required Participant participant = 1;
    required Update update = 2;
}

message QueryHubCommitRequest {
    required uint32 eon = 1;
}

message HubRoot {
    required AMTreePathNode root = 1;
    required uint32 eon = 2;
}

message ContractConstructArgs {
    required uint64 blocks = 1;
    required HubRoot hubRoot = 2;
}

message HubInfo {
    required bool ready = 1;
    required bool recoveryMode = 2;
    required uint32 eon = 3;
    required uint32 blocksPerEon = 4;
    required AMTreePathNode root = 5;
    required bytes publicKey = 6;
    required bytes contractAddress = 7;
}

message ContractHubInfo {
    required bytes startBlockNumber = 1;
    required bytes hubAddress = 2;
    required uint32 blocksPerEon = 3;
    required uint32 eon = 4;
}

message MerklePathNode {
    required bytes nodeHash = 1;
    required PathDirection direction = 2;
}

message CloseTransferDeliveryChallenge {
    required AMTreeProof proof = 1;
    required MerklePath txPath = 2;
    required bytes fromAddr = 3;
    required bytes txHash = 4;
}

message MerklePath {
    repeated MerklePathNode nodes = 1;
}

enum ChallengeStatus {
    OPEN = 0;
    CLOSE = 1;
}

message BalanceUpdateChallengeStatus {
    required BalanceUpdateProof proof = 1;
    required ChallengeStatus status = 2;
}

message TransferDeliveryChallengeStatus {
    required TransferDeliveryChallenge challenge = 1;
    required ChallengeStatus status = 2;
}

message AccountEonState {
    required Update update = 1;
    required bytes allotment = 2;
    required bytes deposit = 3;
    required bytes withdraw = 4;
    repeated OffchainTransaction txs = 5;
    repeated IOU pendingSendTxs = 6;
    repeated OffchainTransaction pendingReceiveTxs = 7;
}

message HubAccount {
    required bytes publicKey = 1;
    required AccountEonState eonState = 2;
}

message IOU {
    required OffchainTransaction transaction = 1;
    required Update update = 2;
}

enum HubEventType {
    HUB_EVENT_NEW_HUB_ROOT = 0;
    HUB_EVENT_NEW_DEPOSIT = 1;
    HUB_EVENT_WITHDRAWAL = 2;
    HUB_EVENT_NEW_TX = 3;
    HUB_EVENT_NEW_UPDATE = 4;
}

message HubEvent {
    required HubEventType type = 1;
    required bytes payload = 2;
    required bytes address = 3;
}

message ProtoContractReturn {
    required bool hasVal = 1;
    required bytes payload = 2;
}

message BlockAddressAndEon {
    required bytes address = 1;
    required int32 eon = 2;
}

enum HubMaliciousFlag {
    STEAL_DEPOSIT = 0;
    STEAL_WITHDRAWAL = 1;
    STEAL_TRANSACTION = 2;
    STEAL_TRANSACTION_IOU = 3;
}

message HubMaliciousFlags {
    repeated HubMaliciousFlag flags = 1;
}

message ProtoBlockAddress {
    required bytes address = 1;
}

message TransferDeliveryChallenge {
    required Update update = 1;
    required OffchainTransaction tx = 2;
    required MerklePath path = 3;
}

message SuccResponse {
    required bool succ = 1;
}

service HubService {
    rpc registerParticipant (RegisterParticipantRequest) returns (Update);
    rpc sendNewTransfer (IOU) returns (SuccResponse);
    rpc queryNewTransfer (ProtoBlockAddress) returns (OffchainTransactionList);
    rpc receiveNewTransfer (IOU) returns (SuccResponse);
    rpc queryUpdate (ProtoBlockAddress) returns (Update);
    rpc queryUpdateWithEon (BlockAddressAndEon) returns (Update);
    rpc getProof (ProtoBlockAddress) returns (AMTreeProof);
    rpc getProofWithEon (BlockAddressAndEon) returns (AMTreeProof);
    rpc getHubInfo (google.protobuf.Empty) returns (HubInfo);
    rpc watch (ProtoBlockAddress) returns (stream HubEvent);
    rpc watchHubRoot (google.protobuf.Empty) returns (stream HubRoot);
    rpc getHubAccount (ProtoBlockAddress) returns (HubAccount);
    //return flags merge result.
    rpc setMaliciousFlags (HubMaliciousFlags) returns (HubMaliciousFlags);
    rpc getMaliciousFlags (google.protobuf.Empty) returns (HubMaliciousFlags);
    //return previous Flags
    rpc resetMaliciousFlags (google.protobuf.Empty) returns (HubMaliciousFlags);
}
