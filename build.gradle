buildscript {
    ext{
        kotlin_version = '1.3.20'
        ktor_version = '1.0.0-beta-3'
        netty_version = '4.1.25.Final'
        guava_version = '20.0'
        protobuf_version = '3.5.1'
        protoc_version = '3.5.1-1'
        grpc_version = '1.18.0'
        ktor_version = '1.0.1'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.20' apply false
    id 'com.google.protobuf' version '0.8.5' apply false
}

version = '1.0-SNAPSHOT'
group = 'org.starcoin'

apply plugin: 'project-report'

subprojects {

    buildscript {
        repositories {
            jcenter()
            maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
            maven { url "https://kotlin.bintray.com/kotlinx" }
        }

        dependencies {
            classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
            classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        }
    }

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'kotlin'
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: 'kotlinx-serialization'
    apply plugin: 'project-report'

    sourceCompatibility = 1.8

//    sourceSets {
//        main.resources.includes += ['*.conf',"*.xml","*.properties"]
//        test.resources.includes += ['*.conf',"*.xml","*.properties"]
//    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://dl.bintray.com/ethereum/maven/" }
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://jitpack.io" }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect"
        compile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.0'
        compile "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.10.0"

        testCompile("org.junit.jupiter:junit-jupiter-engine:5.1.0")
        testCompile("org.mockito:mockito-core:2.10.0")
        testCompile("org.reflections:reflections:0.9.11")
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    task customClean(type: Delete) {
        delete project.relativeProjectPath("database")
        delete project.relativeProjectPath("logs")
        //println(project.relativeProjectPath("database"))
    }
    clean.dependsOn customClean

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile).all {
        kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental",
                                           "-Xuse-experimental=kotlin.experimental.ExperimentalTypeInference",
                                           "-Xuse-experimental=kotlin.ExperimentalMultiplatform",
                                           "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                                           "-Xuse-experimental=kotlinx.coroutines.ObsoleteCoroutinesApi",
                                           "-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi",
                                           "-progressive"]
    }

    test {
        reports.html.enabled = false
        maxHeapSize = "2048m"
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }

    task unitTest(type: Test ) {
        exclude '**/*IntegrationTest*'
        reports.html.enabled = false
        maxHeapSize = "2048m"
        maxParallelForks = 1
    }

    task integrationTest(type: Test ) {
        include '**/*IntegrationTest*'
        reports.html.enabled = false
        maxHeapSize = "2048m"
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
}

task unitTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/unitTests")
    reportOn subprojects*.unitTest
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/integrationTests")
    reportOn subprojects*.integrationTest
}